---
export interface Props {
  id?: string;
  type?: 'success' | 'error' | 'warning' | 'info';
  message: string;
  duration?: number;
  action?: {
    label: string;
    onClick: string;
  };
}

const {
  id = `toast-${Date.now()}`,
  type = 'info',
  message,
  duration = 5000,
  action
} = Astro.props;

const icons = {
  success: 'check-circle',
  error: 'x-circle',
  warning: 'alert-triangle',
  info: 'info'
};

const icon = icons[type];
---

<div 
  id={id}
  class={`toast toast-${type}`}
  data-duration={duration}
  role="alert"
  aria-live="polite"
>
  <i data-lucide={icon} class="w-5 h-5"></i>
  <div class="toast-content">
    <p class="toast-message">{message}</p>
    {action && (
      <button 
        class="toast-action"
        onclick={action.onClick}
      >
        {action.label}
      </button>
    )}
  </div>
  <button 
    class="toast-close"
    aria-label="Close notification"
    onclick={`document.getElementById('${id}').remove()`}
  >
    <i data-lucide="x" class="w-4 h-4"></i>
  </button>
</div>

<style>
  .toast-content {
    flex: 1;
  }

  .toast-message {
    margin: 0;
    font-size: 0.875rem;
    color: var(--gray-900);
  }

  .toast-action {
    margin-top: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--primary);
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    text-decoration: underline;
  }

  .toast-action:hover {
    text-decoration: none;
  }

  .toast-close {
    background: none;
    border: none;
    padding: 0.25rem;
    cursor: pointer;
    color: var(--gray-500);
    border-radius: var(--radius-sm);
    transition: all var(--transition-fast);
  }

  .toast-close:hover {
    background-color: var(--gray-100);
    color: var(--gray-700);
  }
</style>

<script define:vars={{ id, duration }}>
  // Auto-remove toast after duration
  if (duration > 0) {
    setTimeout(() => {
      const toast = document.getElementById(id);
      if (toast) {
        toast.style.animation = 'fadeOut 0.3s ease-out forwards';
        setTimeout(() => toast.remove(), 300);
      }
    }, duration);
  }
</script>