---
export interface Feature {
  title: string;
  description: string;
  icon: string;
  iconColor?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  features: Feature[];
}

const { title, subtitle, features } = Astro.props;

const iconColors = {
  yellow: 'bg-yellow-100 text-yellow-600',
  blue: 'bg-blue-100 text-blue-600',
  green: 'bg-green-100 text-green-600',
  cyan: 'bg-cyan-100 text-cyan-600',
};
---

<section class="py-20 bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    {(title || subtitle) && (
      <div class="text-center mb-12">
        {title && (
          <h2 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">{title}</h2>
        )}
        {subtitle && (
          <p class="text-xl text-gray-600 max-w-3xl mx-auto">{subtitle}</p>
        )}
      </div>
    )}
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
      {features.map((feature, index) => {
        const colorKey = feature.iconColor || ['yellow', 'blue', 'green', 'cyan'][index % 4];
        const colorClass = iconColors[colorKey as keyof typeof iconColors];
        
        return (
          <div class="bg-white p-6 rounded-xl shadow-sm hover:shadow-lg transition-all">
            <div class={`w-12 h-12 ${colorClass} rounded-lg flex items-center justify-center mb-4`}>
              <i data-lucide={feature.icon} class="w-6 h-6"></i>
            </div>
            <h3 class="text-xl font-bold text-gray-900 mb-3">{feature.title}</h3>
            <p class="text-gray-600">{feature.description}</p>
          </div>
        );
      })}
    </div>
  </div>
</section>