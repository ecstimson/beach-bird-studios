---
export interface Props {
  variant?: 'default' | 'transparent';
}

const { variant = 'default' } = Astro.props;

const navItems = [
  { 
    href: '/services', 
    label: 'Services',
    dropdown: [
      { href: '/services', label: 'All Services' },
      { href: '/services/custom-website-design', label: 'Custom Web Design' },
      { href: '/services/ai-website-development', label: 'AI Website Development' },
      { href: '/services/seo-services', label: 'SEO Services' },
    ]
  },
  { href: '/about', label: 'About' },
  { href: '/blog', label: 'Blog' },
];
---

<header class={`fixed top-0 left-0 right-0 ${variant === 'transparent' ? 'bg-transparent' : 'bg-white/95 backdrop-blur-md'} z-50`}>
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-20">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="block">
          <img 
            src="/images/logo.svg" 
            alt="Beach Bird Studios" 
            class="h-10 sm:h-12 w-auto"
            style="max-width: 240px;"
          />
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-10">
        {navItems.map((item) => (
          item.dropdown ? (
            <div class="relative group">
              <button class="flex items-center text-gray-700 font-semibold hover:text-primary transition-colors">
                {item.label}
                <i data-lucide="chevron-down" class="w-4 h-4 ml-1"></i>
              </button>
              <div class="absolute top-full left-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-100 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                {item.dropdown.map((subItem) => (
                  <a 
                    href={subItem.href} 
                    class="block px-4 py-3 text-gray-600 font-medium hover:text-primary hover:bg-gray-50 transition-colors first:rounded-t-lg last:rounded-b-lg"
                  >
                    {subItem.label}
                  </a>
                ))}
              </div>
            </div>
          ) : (
            <a href={item.href} class="text-gray-700 font-semibold hover:text-primary transition-colors">
              {item.label}
            </a>
          )
        ))}
        <a href="/contact" class="btn-primary">Contact</a>
      </div>
      
      <!-- Mobile Menu Button -->
      <button 
        class="md:hidden p-3 rounded-lg hover:bg-gray-100 transition-colors min-w-[48px] min-h-[48px] flex items-center justify-center text-beach-dark" 
        id="mobile-menu-button"
        aria-label="Toggle navigation menu"
        aria-expanded="false"
      >
        <i data-lucide="menu" class="w-6 h-6"></i>
      </button>
    </div>
  </nav>
  
  <!-- Mobile Menu -->
  <div class="hidden md:hidden bg-white/95 backdrop-blur-md" id="mobile-menu">
    <div class="px-4 py-2 space-y-1">
      {navItems.map((item) => (
        item.dropdown ? (
          <div>
            <button class="flex items-center justify-between w-full px-4 py-3 min-h-[48px] text-gray-700 font-semibold hover:text-primary hover:bg-gray-50 rounded-lg transition-colors mobile-dropdown-btn">
              {item.label}
              <i data-lucide="chevron-down" class="w-4 h-4 transition-transform"></i>
            </button>
            <div class="hidden pl-4 space-y-1 mobile-dropdown-menu">
              {item.dropdown.map((subItem) => (
                <a href={subItem.href} class="block px-4 py-3 min-h-[48px] flex items-center text-gray-600 font-medium hover:text-primary hover:bg-gray-50 rounded-lg transition-colors">
                  {subItem.label}
                </a>
              ))}
            </div>
          </div>
        ) : (
          <a href={item.href} class="block px-4 py-3 min-h-[48px] flex items-center text-gray-700 font-semibold hover:text-primary hover:bg-gray-50 rounded-lg transition-colors">
            {item.label}
          </a>
        )
      ))}
      <div class="pt-2 pb-3 border-t border-gray-100">
        <a href="/contact" class="btn-primary w-full justify-center">Contact</a>
      </div>
    </div>
  </div>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  mobileMenuButton?.addEventListener('click', () => {
    const isOpen = !mobileMenu?.classList.contains('hidden');
    mobileMenu?.classList.toggle('hidden');
    mobileMenuButton?.setAttribute('aria-expanded', (!isOpen).toString());
    
    // Animate menu icon
    const icon = mobileMenuButton?.querySelector('[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', isOpen ? 'menu' : 'x');
      if (typeof (window as any).lucide !== 'undefined') {
        (window as any).lucide.createIcons();
      }
    }
  });
  
  // Close mobile menu when clicking on a link
  const mobileMenuLinks = mobileMenu?.querySelectorAll('a');
  mobileMenuLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
    });
  });
  
  // Handle mobile dropdown menus
  const mobileDropdownBtns = document.querySelectorAll('.mobile-dropdown-btn');
  mobileDropdownBtns?.forEach(btn => {
    btn.addEventListener('click', () => {
      const menu = btn.nextElementSibling;
      menu?.classList.toggle('hidden');
      const icon = btn.querySelector('[data-lucide="chevron-down"]');
      if (icon) {
        (icon as HTMLElement).style.transform = menu?.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
      }
    });
  });
</script>