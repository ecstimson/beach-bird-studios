---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Hero from '../../components/Hero.astro';
import FeatureGrid from '../../components/FeatureGrid.astro';
import ProcessTimeline from '../../components/sections/ProcessTimeline.astro';
// import ServiceCard from '../../components/ServiceCard.astro'; // Unused
import CTASection from '../../components/CTASection.astro';
import Footer from '../../components/Footer.astro';

export const prerender = true;

export async function getStaticPaths() {
  const services = await getCollection('services');
  
  return services.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
// const { Content } = await entry.render(); // Unused - using parsed content instead

// Type definitions
interface ContentItem {
  type: string;
  text: string;
}

interface Section {
  title: string;
  content: ContentItem[];
  type: string;
  features?: string[];
}


interface Industry {
  title: string;
  description: string;
}

interface FAQ {
  question: string;
  answer: string;
}

interface Phase {
  title: string;
  content: string[];
  description?: string;
}

// Extract headline and subheadline for hero
const headline = entry.data.title?.replace(' | Beach Bird Studios', '') || 'Professional Web Services';
const subheadline = entry.data.description || 'Transform your online presence with Beach Bird Studios';

// Parse markdown content into sections
const rawContent = entry.body;
const sections: Section[] = [];
let currentSection: Section = { title: '', content: [], type: 'content' };
let heroData: { headline?: string; subheadline?: string } = {};

const lines = rawContent.split('\n');
let skipSection = false;
let inHeroSection = false;
let inMetaSection = false;

for (let i = 0; i < lines.length; i++) {
  const line = lines[i];
  
  // Skip the H1 title as it's in the hero
  if (line.startsWith('# ') && !line.startsWith('## ')) {
    continue;
  }
  
  // Check for special sections to skip or process differently
  if (line.startsWith('## Meta Information')) {
    skipSection = true;
    inMetaSection = true;
    continue;
  } else if (line.startsWith('## Hero Section')) {
    skipSection = true;
    inHeroSection = true;
    continue;
  } else if (line.startsWith('## The Beach Bird Difference')) {
    skipSection = true;
    continue;
  } else if (line.startsWith('## ') && (inMetaSection || inHeroSection)) {
    skipSection = false;
    inMetaSection = false;
    inHeroSection = false;
  }
  
  // Process hero section data
  if (inHeroSection) {
    if (line.startsWith('Headline:')) {
      heroData.headline = line.substring(9).trim();
    } else if (line.startsWith('Subheadline:')) {
      heroData.subheadline = line.substring(12).trim();
    }
    continue;
  }
  
  // Skip meta section entirely
  if (inMetaSection || skipSection) {
    if (line.startsWith('## ') && !line.includes('Meta Information') && !line.includes('Hero Section') && !line.includes('The Beach Bird Difference')) {
      skipSection = false;
      inMetaSection = false;
      inHeroSection = false;
      // Don't continue, process this line
    } else {
      continue;
    }
  }
  
  // New H2 section
  if (line.startsWith('## ')) {
    if (currentSection.content.length > 0 || currentSection.title) {
      sections.push({ ...currentSection });
    }
    const title = line.substring(3).trim();
    currentSection = { 
      title, 
      content: [],
      type: 'content'
    };
    
    // Check for special section types
    if (title.toLowerCase().includes('perfect for')) {
      currentSection.type = 'industries';
    } else if (title.toLowerCase().includes('process')) {
      currentSection.type = 'process';
    } else if (title.toLowerCase().includes('comparison') || title.includes(' vs ')) {
      currentSection.type = 'comparison';
    } else if (title.toLowerCase().includes('what we deliver')) {
      currentSection.type = 'features';
    } else if (title.toLowerCase().includes('real results')) {
      currentSection.type = 'results';
    } else if (title.toLowerCase().includes('faq')) {
      currentSection.type = 'faq';
    }
  } 
  // Check for H3 headers (potential card titles)
  else if (line.startsWith('### ')) {
    const h3Text = line.substring(4).trim();
    currentSection.content.push({ type: 'h3', text: h3Text });
    
    // For certain sections, H3 headers become feature titles
    if (currentSection.title && currentSection.title.toLowerCase().includes('what we deliver')) {
      currentSection.type = 'features';
    }
  }
  // Check for H4 headers (sub-sections)
  else if (line.startsWith('#### ')) {
    currentSection.content.push({ type: 'h4', text: line.substring(5).trim() });
  }
  // Bold headers - treat as regular paragraphs
  else if (line.startsWith('**') && line.includes('**') && line.indexOf('**', 2) > 2) {
    currentSection.content.push({ type: 'paragraph', text: line });
  }
  // Bullet points 
  else if (line.startsWith('- ') || line.startsWith('* ')) {
    const text = line.substring(2).trim();
    // For "What We Deliver" sections, treat as features
    if (currentSection.title && currentSection.title.toLowerCase().includes('what we deliver')) {
      if (!currentSection.features) currentSection.features = [];
      // Add H3 title prefix if there was a recent H3
      const lastH3 = currentSection.content.filter(c => c.type === 'h3').pop();
      if (lastH3) {
        currentSection.features.push(`${lastH3.text}: ${text}`);
      } else {
        currentSection.features.push(text);
      }
      currentSection.type = 'features';
    }
    // Check if this looks like a feature (has a colon or bold text)
    else if (text.includes(':') || text.includes('**')) {
      if (!currentSection.features) currentSection.features = [];
      currentSection.features.push(text);
      if (currentSection.type === 'content') {
        currentSection.type = 'features';
      }
    } else {
      currentSection.content.push({ type: 'bullet', text });
    }
  }
  // Regular paragraph
  else if (line.trim()) {
    currentSection.content.push({ type: 'paragraph', text: line });
  }
}

// Add the last section
if (currentSection.content.length > 0 || currentSection.title) {
  sections.push({ ...currentSection });
}


// Convert feature bullets to FeatureGrid format
const processFeatures = (features: any[], section: Section) => {
  const icons = ['zap', 'shield-check', 'trending-up', 'cpu', 'layers', 'target', 'brain', 'rocket'];
  const colors = ['yellow', 'blue', 'green', 'cyan', 'purple', 'orange', 'pink', 'indigo'];
  
  // If features is empty but we have H3 headers, extract features from H3+paragraph combos
  if ((!features || features.length === 0) && section && section.content) {
    const extractedFeatures = [];
    for (let i = 0; i < section.content.length; i++) {
      if (section.content[i].type === 'h3') {
        const title = section.content[i].text;
        // Look for the next paragraph as description
        let description = '';
        for (let j = i + 1; j < section.content.length; j++) {
          if (section.content[j].type === 'paragraph') {
            description = section.content[j].text;
            break;
          } else if (section.content[j].type === 'h3') {
            break; // Stop if we hit another H3
          }
        }
        extractedFeatures.push(`${title}: ${description}`);
      }
    }
    if (extractedFeatures.length > 0) {
      features = extractedFeatures;
    }
  }
  
  return features.slice(0, 6).map((feature, idx) => {
    const parts = feature.replace(/\*\*/g, '').split(':');
    return {
      icon: icons[idx % icons.length],
      title: parts[0].trim(),
      description: parts[1]?.trim() || parts[0].trim(),
      iconColor: colors[idx % colors.length]
    };
  });
};


// Process industry sections
const processIndustries = (section: Section): Industry[] => {
  const industries: Industry[] = [];
  let currentIndustry: Industry | null = null;
  
  section.content.forEach((item) => {
    if (item.type === 'h3') {
      if (currentIndustry) industries.push(currentIndustry);
      currentIndustry = {
        title: item.text,
        description: ''
      };
    } else if (item.type === 'paragraph' && currentIndustry) {
      currentIndustry.description += item.text + ' ';
    }
  });
  
  if (currentIndustry) industries.push(currentIndustry);
  return industries;
};
---

<Layout 
  title={entry.data.title || entry.slug} 
  description={entry.data.description}
  structuredDataType="Service"
  structuredData={{
   breadcrumb: [
  { name: 'Home', url: '/' },
  { name: 'Services', url: '/services' },
  { name: entry.data.title?.replace(' | Beach Bird Studios', '') || entry.slug, url: `/services/${entry.slug}` }
],
service: {
  name: entry.data.title?.replace(' | Beach Bird Studios', '') || entry.slug,
  type: 'Professional Service',
  description: entry.data.description || 'Professional SEO and web services for North Carolina businesses.'
}
  }}
>
  <Header />
  
  <!-- Hero Section with Beach Bird blue gradient -->
  <Hero
    headline={heroData.headline || headline}
    subheadline={heroData.subheadline || subheadline}
    primaryCTA={{ text: 'Get Your Free SEO Audit', href: '/contact' }}
    secondaryCTA={{ text: 'See Our Process', href: '#process' }}
  />
  
  <!-- Dynamic Sections -->
  {sections.map((section, index) => {
    // Alternate backgrounds between white and gray
    const bgClass = index % 2 === 0 ? 'bg-white' : 'bg-gray-50';
    
    return (
      <section class={`py-16 ${bgClass}`}>
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {section.title && (
            <div class="text-center mb-12">
              <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
                {section.title}
              </h2>
            </div>
          )}
          
          
          {/* Feature Grid Section */}
          {section.type === 'features' && (
            <FeatureGrid 
              features={processFeatures(section.features || [], section)} 
              columns={3} 
              variant="cards" 
            />
          )}
          
          {/* Comparison Cards */}
          {section.type === 'comparison' && section.features && (
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              {processFeatures(section.features, section).map((item, idx) => (
                <div class="bg-white rounded-xl p-8 shadow-lg border-2 border-gray-100 hover:border-beach-blue transition-colors">
                  <div class={`w-12 h-12 bg-beach-blue/10 rounded-lg flex items-center justify-center mb-4`}>
                    <i data-lucide={item.icon} class="w-6 h-6 text-beach-blue"></i>
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 mb-2">{item.title}</h3>
                  <p class="text-gray-600">{item.description}</p>
                </div>
              ))}
            </div>
          )}
          
          {/* Industries Grid or Perfect For List */}
          {section.type === 'industries' && (
            section.title && section.title.toLowerCase().includes('perfect for') ? (
              // Render as simple bullet list for "Perfect For" sections - centered
              <div class="max-w-3xl mx-auto">
                <ul class="space-y-4">
                  {section.content.filter(item => item.type === 'bullet').map((item) => (
                    <li class="flex items-center justify-center text-center">
                      <i data-lucide="check-circle" class="w-6 h-6 text-beach-blue mr-3 flex-shrink-0"></i>
                      <span class="text-lg text-gray-700">{item.text}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              // Render as grid for industries with descriptions
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {processIndustries(section).map((industry) => (
                  <div class="bg-white rounded-lg p-6 shadow hover:shadow-lg transition-shadow border border-gray-100">
                    <div class="w-10 h-10 bg-beach-blue/10 rounded-lg flex items-center justify-center mb-4">
                      <i data-lucide="briefcase" class="w-5 h-5 text-beach-blue"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">{industry.title}</h3>
                    <p class="text-gray-600 text-sm">{industry.description}</p>
                  </div>
                ))}
              </div>
            )
          )}
          
          {/* Process Steps */}
          {section.type === 'process' && (
            <div class={section.title && section.title.toLowerCase().includes('monthly') ? 'grid grid-cols-1 md:grid-cols-3 gap-8' : 'space-y-12'}>
              {section.content.filter(item => item.type === 'h3').map((item, idx) => {
                const h3Index = section.content.indexOf(item);
                const phases: any[] = [];
                let currentPhase: { title: string; content: string[] } | null = null;
                const bullets: string[] = [];
                
                // Collect H4 phases and their content
                for (let i = h3Index + 1; i < section.content.length; i++) {
                  const contentItem = section.content[i];
                  if (contentItem.type === 'h3') break; // Stop at next H3
                  
                  if (contentItem.type === 'h4') {
                    if (currentPhase) phases.push(currentPhase);
                    currentPhase = { title: contentItem.text, content: [] };
                  } else if (currentPhase && contentItem.type === 'bullet') {
                    currentPhase.content.push(contentItem.text);
                  } else if (!currentPhase && contentItem.type === 'bullet') {
                    bullets.push(contentItem.text);
                  } else if (!currentPhase && contentItem.type === 'paragraph') {
                    // Direct paragraph after H3
                    if (!(phases as any).description) (phases as any).description = contentItem.text;
                  }
                }
                if (currentPhase) phases.push(currentPhase);
                
                // For "Our Monthly Process", render as simple cards with homepage styling
                if (section.title && section.title.toLowerCase().includes('monthly')) {
                  return (
                    <div class="text-center">
                      <div class="process-step-number process-step-number-blue">
                        <span>{idx + 1}</span>
                      </div>
                      <h3 class="text-lg font-bold text-gray-900 mb-2">{item.text}</h3>
                      {bullets.length > 0 && (
                        <ul class="text-gray-600 text-sm space-y-1">
                          {bullets.map((bullet) => (
                            <li>{bullet}</li>
                          ))}
                        </ul>
                      )}
                    </div>
                  );
                }
                
                // If there are phases (H4 sections), render them as cards
                if (phases.length > 0) {
                  return (
                    <div class="mb-12">
                      <h3 class="text-2xl font-bold text-gray-900 mb-6">{item.text}</h3>
                      {(phases as any).description && (
                        <p class="text-gray-600 mb-6">{(phases as any).description}</p>
                      )}
                      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {phases.map((phase, phaseIdx) => (
                          <div class="bg-white rounded-lg p-6 shadow-md border border-gray-100">
                            <div class="mb-4">
                              <h4 class="text-lg font-semibold text-gray-900">{phase.title}</h4>
                            </div>
                            <ul class="space-y-2">
                              {phase.content.map((bullet: string) => (
                                <li class="flex items-start">
                                  <i data-lucide="check" class="w-4 h-4 text-beach-blue mr-2 mt-1 flex-shrink-0"></i>
                                  <span class="text-gray-600 text-sm">{bullet}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                } else {
                  // Simple process step without phases - use homepage styling
                  return (
                    <div class="text-center">
                      <div class="process-step-number">
                        <span>{idx + 1}</span>
                      </div>
                      <h3 class="text-lg font-bold text-gray-900 mb-2">{item.text}</h3>
                      {bullets.length > 0 ? (
                        <ul class="text-gray-600 text-sm space-y-1">
                          {bullets.map((bullet) => (
                            <li>{bullet}</li>
                          ))}
                        </ul>
                      ) : (
                        <p class="text-gray-600 text-sm">
                          {section.content[h3Index + 1]?.text || ''}
                        </p>
                      )}
                    </div>
                  );
                }
              })}
            </div>
          )}
          
          {/* FAQ Section */}
          {section.type === 'faq' && (
            <div class="space-y-6 max-w-4xl mx-auto">
              {(() => {
                const faqs: any[] = [];
                let currentFaq: any = null;
                
                section.content.forEach((item) => {
                  if (item.type === 'paragraph') {
                    if (item.text.startsWith('Q:')) {
                      if (currentFaq && currentFaq.answer) faqs.push(currentFaq);
                      currentFaq = {
                        question: item.text.substring(2).trim(),
                        answer: ''
                      };
                    } else if (item.text.startsWith('A:') && currentFaq) {
                      currentFaq.answer = item.text.substring(2).trim();
                      faqs.push(currentFaq);
                      currentFaq = null;
                    }
                  }
                });
                if (currentFaq && currentFaq.answer) faqs.push(currentFaq);
                
                return faqs.map((faq, idx) => (
                  <div class="bg-white rounded-lg p-6 shadow-md border border-gray-100">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2">
                      {faq.question}
                    </h3>
                    <p class="text-gray-600">{faq.answer}</p>
                  </div>
                ));
              })()}
            </div>
          )}
          
          {/* Results Section */}
          {section.type === 'results' && (
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {section.content.filter(item => item.type === 'h3').map((item, idx) => {
                const h3Index = section.content.indexOf(item);
                const bullets = [];
                
                // Collect bullets after this H3 until next H3
                for (let i = h3Index + 1; i < section.content.length; i++) {
                  if (section.content[i].type === 'h3') break;
                  if (section.content[i].type === 'bullet') {
                    bullets.push(section.content[i].text);
                  }
                }
                
                return (
                  <div class="bg-gradient-to-br from-white to-gray-50 rounded-xl p-6 shadow-md border border-gray-100">
                    <div class="w-12 h-12 bg-beach-blue/10 rounded-lg flex items-center justify-center mb-4">
                      <i data-lucide="trending-up" class="w-6 h-6 text-beach-blue"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-3">{item.text}</h3>
                    <ul class="space-y-2">
                      {bullets.map((bullet) => (
                        <li class="flex items-start">
                          <i data-lucide="check" class="w-4 h-4 text-green-500 mr-2 mt-1 flex-shrink-0"></i>
                          <span class="text-gray-600 text-sm">{bullet}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                );
              })}
            </div>
          )}
          
          {/* Regular Content Section */}
          {section.type === 'content' && (
            <div class="prose prose-lg max-w-4xl mx-auto">
              {section.content.map((item, idx) => {
                if (item.type === 'h3') {
                  return <h3 class="text-2xl font-semibold text-gray-800 mb-4 mt-8">{item.text}</h3>;
                } else if (item.type === 'h4') {
                  return <h4 class="text-xl font-semibold text-gray-700 mb-3 mt-6">{item.text}</h4>;
                } else if (item.type === 'paragraph') {
                  // Parse for bold text
                  const htmlText = item.text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                  return <p class="text-lg text-gray-600 mb-6 leading-relaxed" set:html={htmlText}></p>;
                } else if (item.type === 'bullet') {
                  return (
                    <ul class="list-disc pl-6 mb-2 space-y-1">
                      <li class="text-gray-600">{item.text}</li>
                    </ul>
                  );
                }
                return null;
              })}
            </div>
          )}
        </div>
      </section>
    );
  })}
  
  <!-- Process Timeline -->
  <ProcessTimeline />
  
  <!-- CTA Section with Beach Bird gradient -->
  <CTASection
    title="Stop watching competitors steal your customers. Let's implement a proven SEO strategy that actually works."
    primaryCTA={{ text: 'Get Your Free SEO Audit', href: '/contact' }}
    secondaryCTA={{ text: 'Call 910-512-6990', href: 'tel:910-512-6990', phone: true }}
  />
  
  <Footer />
</Layout>

<style>
  /* Beach Bird brand colors */
  .bg-beach-blue {
    background-color: #47A7EB;
  }
  
  .bg-beach-yellow {
    background-color: #FFC107;
  }
  
  .bg-beach-cream {
    background-color: #F5E6D3;
  }
  
  .text-beach-blue {
    color: #47A7EB;
  }
  
  .text-beach-yellow {
    color: #FFC107;
  }
  
  /* Hide H1 from markdown since it's in the hero */
  .prose h1 {
    @apply hidden;
  }
  
  /* Style any remaining markdown content */
  .prose h2 {
    @apply text-3xl font-bold text-gray-900 mb-6;
  }
  
  .prose h3 {
    @apply text-2xl font-semibold text-gray-800 mb-4;
  }
  
  .prose p {
    @apply text-lg text-gray-600 mb-6 leading-relaxed;
  }
  
  .prose ul {
    @apply list-disc pl-6 mb-6 space-y-2;
  }
  
  .prose li {
    @apply text-gray-600;
  }
  
  .prose strong {
    @apply font-semibold text-gray-900;
  }
  
  .prose a {
    @apply text-beach-blue hover:text-blue-700 underline;
  }
</style>